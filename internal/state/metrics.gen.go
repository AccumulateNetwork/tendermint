// Code generated by metricsgen. DO NOT EDIT.

package state

import (
	"github.com/go-kit/kit/metrics/discard"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
)

func PrometheusMetrics(namespace string, labels ...string) *Metrics {
	return &Metrics{
		BlockProcessingTime: prometheus.NewHistogramFrom(stdprometheus.HistogramOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "block_processing_time",
			Help:      "Time spent processing FinalizeBlock",

			Buckets: stdprometheus.LinearBuckets(1, 10, 10),
		}, labels),
		ConsensusParamUpdates: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "consensus_param_updates",
			Help:      "Number of consensus parameter updates returned by the application since process start.",
		}, labels),
		ValidatorSetUpdates: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "validator_set_updates",
			Help:      "Number of validator set updates returned by the application since process start.",
		}, labels),
		PruningServiceBlockRetainHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pruning_service_block_retain_height",
			Help:      "PruningServiceBlockRetainHeight is the accepted block retain height set by the data companion",
		}, labels),
		PruningServiceBlockResultsRetainHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pruning_service_block_results_retain_height",
			Help:      "PruningServiceBlockResultsRetainHeight is the accepted block results retain height set by the data companion",
		}, labels),
		PruningServiceTxIndexerRetainHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pruning_service_tx_indexer_retain_height",
			Help:      "PruningServiceTxIndexerRetainHeight is the accepted transactions indices retain height set by the data companion",
		}, labels),
		PruningServiceBlockIndexerRetainHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pruning_service_block_indexer_retain_height",
			Help:      "PruningServiceBlockIndexerRetainHeight is the accepted blocks indices retain height set by the data companion",
		}, labels),
		ApplicationBlockRetainHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "application_block_retain_height",
			Help:      "ApplicationBlockRetainHeight is the accepted block retain height set by the application",
		}, labels),
		BlockStoreBaseHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "block_store_base_height",
			Help:      "BlockStoreBaseHeight shows the first height at which a block is available",
		}, labels),
		ABCIResultsBaseHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "abciresults_base_height",
			Help:      "ABCIResultsBaseHeight shows the first height at which abci results are available",
		}, labels),
		TxIndexerBaseHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "tx_indexer_base_height",
			Help:      "TxIndexerBaseHeight shows the first height at which tx indices are available",
		}, labels),
		BlockIndexerBaseHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "block_indexer_base_height",
			Help:      "BlockIndexerBaseHeight shows the first height at which block indices are available",
		}, labels),
	}
}

func NopMetrics() *Metrics {
	return &Metrics{
		BlockProcessingTime:                    discard.NewHistogram(),
		ConsensusParamUpdates:                  discard.NewCounter(),
		ValidatorSetUpdates:                    discard.NewCounter(),
		PruningServiceBlockRetainHeight:        discard.NewGauge(),
		PruningServiceBlockResultsRetainHeight: discard.NewGauge(),
		PruningServiceTxIndexerRetainHeight:    discard.NewGauge(),
		PruningServiceBlockIndexerRetainHeight: discard.NewGauge(),
		ApplicationBlockRetainHeight:           discard.NewGauge(),
		BlockStoreBaseHeight:                   discard.NewGauge(),
		ABCIResultsBaseHeight:                  discard.NewGauge(),
		TxIndexerBaseHeight:                    discard.NewGauge(),
		BlockIndexerBaseHeight:                 discard.NewGauge(),
	}
}

func (m *Metrics) With(labelsAndValues ...string) *Metrics {
	return &Metrics{
		BlockProcessingTime:                    m.BlockProcessingTime.With(labelsAndValues...),
		ConsensusParamUpdates:                  m.ConsensusParamUpdates.With(labelsAndValues...),
		ValidatorSetUpdates:                    m.ValidatorSetUpdates.With(labelsAndValues...),
		PruningServiceBlockRetainHeight:        m.PruningServiceBlockRetainHeight.With(labelsAndValues...),
		PruningServiceBlockResultsRetainHeight: m.PruningServiceBlockResultsRetainHeight.With(labelsAndValues...),
		PruningServiceTxIndexerRetainHeight:    m.PruningServiceTxIndexerRetainHeight.With(labelsAndValues...),
		PruningServiceBlockIndexerRetainHeight: m.PruningServiceBlockIndexerRetainHeight.With(labelsAndValues...),
		ApplicationBlockRetainHeight:           m.ApplicationBlockRetainHeight.With(labelsAndValues...),
		BlockStoreBaseHeight:                   m.BlockStoreBaseHeight.With(labelsAndValues...),
		ABCIResultsBaseHeight:                  m.ABCIResultsBaseHeight.With(labelsAndValues...),
		TxIndexerBaseHeight:                    m.TxIndexerBaseHeight.With(labelsAndValues...),
		BlockIndexerBaseHeight:                 m.BlockIndexerBaseHeight.With(labelsAndValues...),
	}
}
